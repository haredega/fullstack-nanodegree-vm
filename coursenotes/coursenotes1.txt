Fullstack Foundations Coursenotes

CRUD
Create
Read
Update
Delete

Object Relational Mapper (ORM)
Structure that links python to sql

SQLALchemy
Configuration --> won't change

, Class, Table, Mapper 

to make the python code run -->
1)on the git bash, navigate to the vagrant folder
2)vagrant up and vagrant ssh
3) navigate to cd /vagrant and then to the folder where the database description is.
4) run python database_file_name.py
5) the database will be created.




!Vagrant didn't have either mysql, nor sqlalchemy installed!!
How to install SQLALchemy:
Aha,sir,I can help you. First step,you should intall the MySql,like these:

sudo apt-get install mysql-server
sudo apt-get install mysql-client
sudo apt-get install libmysqlclient15-dev
Second step,install the python-mysqldb:

sudo apt-get install python-mysqldb
Third step,install the easy_install:

sudo wget http://peak.telecommunity.com/dist/ez_setup.py
sudo python ez_setup.py
Forth step,install the MySQL-Python:

sudo easy_install MySQL-Python
Finally,sqlalchemy:

sudo easy_install SQLAlchemy

Getting Idle
In the terminal, do
sudo apt-get install idle

Adding :

Delete:
1) find entry
2) session.delete(item)
3)session.commit()

#######################################################
CRUD Review
Operations with SQLAlchemy

In this lesson, we performed all of our CRUD operations with SQLAlchemy on an SQLite database. Before we perform any operations, we must first import the necessary libraries, connect to our restaurantMenu.db, and create a session to interface with the database:

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database_setup import Base, Restaurant, MenuItem

engine = create_engine('sqlite:///restaurantMenu.db')
Base.metadata.bind=engine
DBSession = sessionmaker(bind = engine)
session = DBSession()

CREATE
We created a new Restaurant and called it Pizza Palace:
myFirstRestaurant = Restaurant(name = "Pizza Palace")
session.add(myFirstRestaurant)
session.commit()
We created a cheese pizza menu item and added it to the Pizza Palace Menu:
cheesepizza = menuItem(name="Cheese Pizza", description = "Made with all natural ingredients and fresh mozzarella", course="Entree", price="$8.99", restaurant=myFirstRestaurant)
session.add(cheesepizza)
session.commit()
READ
We read out information in our database using the query method in SQLAlchemy:

firstResult = session.query(Restaurant).first()
firstResult.name

items = session.query(MenuItem).all()
for item in items:
    print item.name
UPDATE
In order to update and existing entry in our database, we must execute the following commands:

Find Entry
Reset value(s)
Add to session
Execute session.commit()
We found the veggie burger that belonged to the Urban Burger restaurant by executing the following query:
veggieBurgers = session.query(MenuItem).filter_by(name= 'Veggie Burger')
for veggieBurger in veggieBurgers:
    print veggieBurger.id
    print veggieBurger.price
    print veggieBurger.restaurant.name
    print "\n"
Then we updated the price of the veggie burger to $2.99:

UrbanVeggieBurger = session.query(MenuItem).filter_by(id=8).one()
UrbanVeggieBurger.price = '$2.99'
session.add(UrbanVeggieBurger)
session.commit() 
DELETE
To delete an item from our database we must follow the following steps:

Find the entry
Session.delete(Entry)
Session.commit()
We deleted spinach Ice Cream from our Menu Items database with the following operations:

spinach = session.query(MenuItem).filter_by(name = 'Spinach Ice Cream').one()
session.delete(spinach)
session.commit() 
 Previou



